#!/usr/bin/env python

import numpy as np
import sympy as sp
from sympy.physics.wigner import gaunt

def sph_u_c2r(l):
    '''
    Set up transformation matrix complex->real spherical harmonics.

    please refer to:
    https://en.wikipedia.org/wiki/Spherical_harmonics#Real_form
    U_R2C is the conjugate transpose of U_C2R
    '''

    # A strange bug:
    # https://stackoverflow.com/questions/9887549/negative-exponent-with-numpy-array-operand/42776488
    l = int(l)

    TLP1 = 2 * l + 1
    U_C2R = np.zeros((TLP1, TLP1), dtype=complex)

    sqrt2inv = 1.0 / np.sqrt(2.0)
    for ii in range(TLP1):
        M = ii - l
        if (M < 0):
            U_C2R[ii, ii] = 1j * sqrt2inv
            U_C2R[ii, -(ii+1)] = -1j * (-1)**M * sqrt2inv
        if (M == 0):
            U_C2R[ii, ii] = 1.0
        if (M > 0):
            U_C2R[ii, -(ii+1)] = sqrt2inv
            U_C2R[ii, ii] = (-1)**M * sqrt2inv

    return U_C2R


# Maximum l in Gaunt coefficients
GAUNT_LMAX        = 5
# Gaunt coefficients by integrating three *complex* spherical harmonics
GAUNT_COEFF_DATA1 = {}
# Gaunt coefficients by integrating three *real* spherical harmonics
GAUNT_COEFF_DATA2 = {}
# unitary matrix for transforming complex to real spherical harmonics.
U2R_MAT           = [sph_u_c2r(l) for l in range(GAUNT_LMAX)]

with open('gaunt.py', 'w+') as out:
  out.write('#!/usr/bin/env python\n')
  out.write('# Generated by gen_gaunt_data.py\n\n')
  out.write('import numpy as np\n\n')
  out.write(f'GAUNT_LMAX = {GAUNT_LMAX}\n\n')
  out.write('# (l1, l2, l3; m1, m2, m3) : G\n')
  out.write('GAUNT_COEFF_DATA1 = {\n')

  ngc = 0
  for l1 in range(GAUNT_LMAX):
    for l2 in range(GAUNT_LMAX):
      for l3 in range(GAUNT_LMAX):
  
        # zero for odd sum of ls
        L = l1 + l2 + l3
        if L % 2 != 0: continue
  
        # zero if the triangle inequality not fulfilled
        a, b, c = sorted([l1, l2, l3])
        if a + b < c: continue
  
        for m1 in range(-l1, l1+1):
          for m2 in range(-l2, l2+1):
            for m3 in range(-l3, l3+1):
              # zero if sum of ms not zero
              m = m1 + m2 + m3
              if m != 0: continue

              ngc += 1
              k = f'({l1:2d},{l2:2d},{l3:2d}; {m1:2d},{m2:2d},{m3:2d})'
              g = sp.N(gaunt(l1, l2, l3, m1, m2, m3))
              v = float(g)
              GAUNT_COEFF_DATA1[k] = v
              # out.write(f'   # l1 = {l1}, l2 = {l2}, l3 = {l3}; m1 = {m1:2d}, m2 = {m2:2d}, m3 = {m3:2d}\n')
              out.write(f'   "{k}" : {v:20.16f},')
              if ngc % 3 == 0:
                out.write('\n')

  out.write('}')
  out.write('\n\n')

  out.write('GAUNT_COEFF_DATA2 = {\n')

  ngc = 0
  for l1 in range(GAUNT_LMAX):
    for l2 in range(GAUNT_LMAX):
      for l3 in range(GAUNT_LMAX):
  
        for m1 in range(-l1, l1+1):
          for m2 in range(-l2, l2+1):
            for m3 in range(-l3, l3+1):

              k1 = f'({l1:2d},{l2:2d},{l3:2d}; {m1:2d},{m2:2d},{m3:2d})'
              g2 = 0
              for ii in range(0, 2*l1+1):
                for jj in range(0, 2*l2+1):
                  for kk in range(0, 2*l3+1):
                    k2 = f'({l1:2d},{l2:2d},{l3:2d}; {ii-l1:2d},{jj-l2:2d},{kk-l3:2d})'
                    if k2 not in GAUNT_COEFF_DATA1:
                      g1 = 0
                    else:
                      g1 = GAUNT_COEFF_DATA1[k2]
                    g2 += U2R_MAT[l1][m1-l1, ii] * U2R_MAT[l2][m2-l2, jj] * U2R_MAT[l3][m3-l3, kk] * g1

              if not np.isclose(np.abs(g2), 0):
                ngc += 1
                GAUNT_COEFF_DATA2[k1] = g2
                assert np.isclose(g2.imag, 0), 'Gaunt coefficients from real spherical harmonics NOT real!'
                out.write(f'   "{k1}" : {g2.real:20.16f},')
                if ngc % 3 == 0:
                  out.write('\n')

  out.write('}\n\n')

  TABLE_FUNC = '''
def GauntTable(l1=0, l2=0, l3=0, m1=0, m2=0, m3=0, real=True):
    """
    Get Gaunt coefficients from the pre-calculated table.

    If "real = True", the the Gaunt coefficients are defined as the integral
    over three *real* spherical harmonics.
    """
    lmax = np.max([l1, l2, l3])
    assert lmax < GAUNT_LMAX

    k = f'({l1:2d},{l2:2d},{l3:2d}; {m1:2d},{m2:2d},{m3:2d})'
    if real:
        g = 0.0 if k not in GAUNT_COEFF_DATA2 else GAUNT_COEFF_DATA2[k]
    else:
        g = 0.0 if k not in GAUNT_COEFF_DATA1 else GAUNT_COEFF_DATA1[k]

    return g
'''

  out.write(TABLE_FUNC)

